AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Jenkins AWS SSM Hybrid Activation with EKS and ECR access

  This template sets up the necessary AWS resources for Jenkins servers to securely 
  interact with AWS services using SSM hybrid activations.

  Parameters:
  - RegistrationLimit: The number of servers that can register using this activation (default: 1)

  After deploying this stack, use the following shell script to set up your Jenkins server(s):
  [https://github.com/Pjv93/aws-security/blob/main/jenkins/install-ssm.sh]

  Instructions:
  1. Deploy this CloudFormation stack.
  2. Note the ActivationId and ActivationCode from the stack outputs.
  3. Run the provided shell script on each Jenkins server, entering the AWS region, 
     ActivationId, and ActivationCode when prompted.

Parameters:
  RegistrationLimit:
    Type: Number
    Default: 1
    Description: The number of servers that can register using this activation
    MinValue: 1
    MaxValue: 100

Resources:
  # SSM Service Role for hybrid activations
  SSMServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: JenkinsSSMServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
      # S3 access policy
      - PolicyName: JenkinsS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:ListBucket'
                - 's3:GetBucketLocation'
              Resource: 'arn:aws:s3:::iampjv.co'
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:DeleteObject'
              Resource: 'arn:aws:s3:::iampjv.co/*'
      
      # ECR access policy
      - PolicyName: JenkinsECRAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'ecr:InitiateLayerUpload'
                - 'ecr:UploadLayerPart'
                - 'ecr:CompleteLayerUpload'
                - 'ecr:PutImage'
              Resource: '*'
      
      # EKS access policy
      - PolicyName: JenkinsEKSAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'eks:DescribeCluster'
                - 'eks:ListClusters'
                - 'eks:AccessKubernetesApi'
              Resource: 'arn:aws:eks:*:*:cluster/*'
            - Effect: Allow
              Action:
                - 'eks:GetToken'
              Resource: '*'

        # Add more policies here as needed for your Jenkins CI/CD pipelines
        # For example, you might need permissions for:
        # - CloudFormation (for infrastructure as code)
        # - Lambda (for serverless deployments)
        # - RDS (for database interactions)
        # - CloudWatch (for logging and monitoring)

  # Lambda Role for creating SSM activation
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaSSMActivation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:CreateActivation'
                  - 'ssm:DeleteActivation'
                  - 'iam:PassRole'
                Resource: '*'
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  # Lambda function to create SSM activation
  SSMActivationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import os

          def handler(event, context):
              ssm = boto3.client('ssm')
              
              try:
                  if event['RequestType'] == 'Create':
                      ssm_role = os.environ['SSM_SERVICE_ROLE']
                      role_name = ssm_role.split('/')[-1]  # Extract role name from ARN
                      registration_limit = int(os.environ['REGISTRATION_LIMIT'])
                      response = ssm.create_activation(
                          Description='Activation for Jenkins Server',
                          IamRole=role_name,
                          RegistrationLimit=registration_limit
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'ActivationId': response['ActivationId'],
                          'ActivationCode': response['ActivationCode']
                      })
                  elif event['RequestType'] == 'Delete':
                      # You might want to delete the activation here
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          SSM_SERVICE_ROLE: !GetAtt SSMServiceRole.Arn
          REGISTRATION_LIMIT: !Ref RegistrationLimit

  # Custom resource to trigger Lambda function
  SSMActivation:
    Type: 'Custom::SSMActivation'
    Properties:
      ServiceToken: !GetAtt SSMActivationLambda.Arn

Outputs:
  SSMServiceRoleArn:
    Description: 'ARN of the SSM Service Role'
    Value: !GetAtt SSMServiceRole.Arn
  JenkinsRoleArn:
    Description: 'ARN of the Jenkins IAM Role'
    Value: !GetAtt JenkinsRole.Arn
  ActivationId:
    Description: 'SSM Activation ID'
    Value: !GetAtt SSMActivation.ActivationId
  ActivationCode:
    Description: 'SSM Activation Code'
    Value: !GetAtt SSMActivation.ActivationCode
  RegistrationLimit:
    Description: 'Number of servers that can register with this activation'
    Value: !Ref RegistrationLimit

# Note: This template creates the necessary AWS resources for Jenkins servers 
# to securely interact with AWS services using SSM hybrid activations.
#
# Key components:
# 1. SSM Service Role: Allows the on-premises Jenkins server to communicate with AWS SSM.
# 2. Jenkins Role: Provides permissions for Jenkins to interact with S3, ECR, and EKS.
# 3. Lambda function: Creates the SSM activation for the Jenkins server(s).
#
# To use this template:
# 1. Deploy the CloudFormation stack.
# 2. Use the ActivationId and ActivationCode outputs to register your Jenkins server(s) with SSM.
# 3. Configure your Jenkins pipelines to assume the JenkinsAccessRole when interacting with AWS services.
#
# Remember to review and adjust the permissions in the JenkinsRole as needed for your specific use case,
# always following the principle of least privilege. You may need to add or modify permissions
# based on the specific AWS services your CI/CD pipelines interact with.
